
const config = {
    telegram: {
        botToken: '7564908163:AAGODR5Z6V586b81B5ghU0D1aGGx2CzIjyk',
        chatId: '-4698373221',
        apiUrl: 'https://api.telegram.org/bot'
    },
    messages: {
        success: '‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.',
        error: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º –Ω–∞–ø—Ä—è–º—É—é.',
        validation: '‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è',
        loading: '<i class="fas fa-spinner fa-spin"></i> –û—Ç–ø—Ä–∞–≤–∫–∞...'
    }
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
document.addEventListener('DOMContentLoaded', function() {
    initForms();
    initScrollButton();
    loadDataAndInitializeUI(); 
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Ñ–æ—Ä–º
function initForms() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ñ–æ—Ä–º
    document.querySelectorAll('.enrollment-form__content:not(.enrollment-modal__form)').forEach(form => {
        form.addEventListener('submit', async function(e) {
            e.preventDefault();
            await handleFormSubmit(this);
        });
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    initModal();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Ñ–æ—Ä–º—ã
async function handleFormSubmit(form) {
    const formData = {
        name: form.querySelector('.enrollment-form__input[placeholder="–í–∞—à–µ –∏–º—è"]').value,
        phone: form.querySelector('.enrollment-form__input[placeholder="–¢–µ–ª–µ—Ñ–æ–Ω"]').value,
        course: form.querySelector('.enrollment-form__select')?.value || '–Ω–µ —É–∫–∞–∑–∞–Ω',
        location: form.closest('.enrollment-form').dataset.location || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
    };

    if (!validateForm(formData)) return;

    const submitBtn = form.querySelector('.enrollment-form__submit');
    const originalContent = submitBtn.innerHTML;
    submitBtn.disabled = true;
    submitBtn.innerHTML = config.messages.loading;

    const message = generateStandardMessage(formData);
    await sendToTelegram(message, form, submitBtn, originalContent);
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
function validateForm(formData) {
    if (!formData.name || !formData.phone) {
        alert(config.messages.validation);
        return false;
    }
    return true;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Ñ–æ—Ä–º—ã
function generateStandardMessage(data) {
    return `üìå *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞* (${data.location}):\n\n` +
        `üë§ *–ò–º—è*: ${data.name}\n` +
        `üìû *–¢–µ–ª–µ—Ñ–æ–Ω*: ${data.phone}\n` +
        `üìö *–ö—É—Ä—Å*: ${data.course}`;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
async function sendToTelegram(message, form, submitBtn, originalContent) {
    try {
        const response = await fetch(`${config.telegram.apiUrl}${config.telegram.botToken}/sendMessage`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                chat_id: config.telegram.chatId,
                text: message,
                parse_mode: 'Markdown'
            })
        });

        const result = await response.json();
        if (result.ok) {
            alert(config.messages.success);
            if (form) form.reset();
        } else {
            throw new Error('Telegram API error');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        alert(config.messages.error);
    } finally {
        if (submitBtn) {
            submitBtn.disabled = false;
            submitBtn.innerHTML = originalContent;
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function initModal() {
    const modal = new bootstrap.Modal(document.getElementById('enrollmentModal'));

    document.querySelectorAll('[data-bs-toggle="modal"]').forEach(btn => {
        btn.addEventListener('click', () => {
            modal.show();
        });
    });
}

// –ö–Ω–æ–ø–∫–∞ —Å–∫—Ä–æ–ª–ª–∞
function initScrollButton() {
    const scrollBtn = document.getElementById('scrollTopBtn');

    window.addEventListener('scroll', () => {
        scrollBtn.style.display = (window.pageYOffset > 300) ? 'block' : 'none';
    });

    scrollBtn.addEventListener('click', () => {
        window.scrollTo({
            top: 0,
            behavior: 'smooth'
        });
    });
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UI
async function loadDataAndInitializeUI() {
    try {
       
        const response = await fetch('data/data.json'); 
        

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();

        renderFeatures(data.features);
        renderTeachers(data.teachers);
        initSwiper(); 

       
        setTimeout(hidePreloader, 500); 
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        hidePreloader();
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
    }
}

function hidePreloader() {
    const preloader = document.getElementById('preloader');
    if (preloader) {
        preloader.classList.add('hidden');
       
        preloader.addEventListener('transitionend', function() {
            preloader.remove();
        });
    }
}

// –†–µ–Ω–¥–µ—Ä –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤
function renderFeatures(features) {
    const container = document.querySelector('.features__grid');
    if (container) {
        container.innerHTML = features.map(feature => `
            <div class="feature">
                <div class="feature__icon">
                    <i class="${feature.icon}"></i>
                </div>
                <h3 class="feature__title">${feature.title}</h3>
                <p class="feature__text">${feature.text}</p>
            </div>
        `).join('');
    }
}

// –†–µ–Ω–¥–µ—Ä –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
function renderTeachers(teachers) {
    const container = document.querySelector('.teacherSwiper .swiper-wrapper');
    if (container) {
        container.innerHTML = teachers.map(teacher => `
            <div class="swiper-slide">
                <div class="teacher">
                    <img src="${teacher.photo}" alt="${teacher.name}" class="teacher__photo">
                    <h3 class="teacher__name">${teacher.name}</h3>
                    <p class="teacher__subject">${teacher.subject}</p>
                    <button class="button button--primary button--sm" data-bs-toggle="modal" data-bs-target="#enrollmentModal">–ó–∞–ø–∏—Å–∞—Ç—å—Å—è</button>
                </div>
            </div>
        `).join('');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Swiper
function initSwiper() {
    const teacherSwiperElement = document.querySelector('.teacherSwiper');
    if (teacherSwiperElement && teacherSwiperElement.querySelector('.swiper-slide')) {
        const teacherSwiper = new Swiper('.teacherSwiper', {
            slidesPerView: 1,
            spaceBetween: 20,
            loop: true,
            navigation: {
                nextEl: '.swiper-button-next',
                prevEl: '.swiper-button-prev',
            },
            pagination: {
                el: '.swiper-pagination',
                clickable: true,
            },
        });
    } else {
        console.warn('Swiper –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ª–∞–π–¥–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
    }
}